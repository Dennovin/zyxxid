---
- hosts: all
  become: yes

  vars_files:
  - passwords.yaml

  handlers:
  - name: reboot machine
    shell: /sbin/reboot
    ignore_errors: true
    async: 1
    poll: 0
    notify: wait for machine to come back up

  - name: wait for machine to come back up
    local_action: wait_for host="{{ ansible_ssh_host }}" port="{{ ansible_ssh_port }}" delay=1 timeout=300
    become: no

  tasks:
  - name: set hostname
    lineinfile: dest=/etc/hostname regexp=".*" line="{{ ansible_hostname }}"
    notify: reboot machine

  - name: update apt cache
    apt: update_cache=yes cache_valid_time=86400

  - name: create app group
    group: name=zyxxid state=present gid=2001

  - name: create app user
    user: name=zyxxid uid=2001 groups=zyxxid append=yes

  - name: allow ansible user to sudo to app user without a password
    lineinfile: 'dest=/etc/sudoers state=present regexp="{{ ansible_user }} ALL=\(zyxxid\)" line="{{ ansible_user }} ALL=(zyxxid) NOPASSWD: ALL" validate="visudo -cf %s"'

  - name: install packages for all systems
    apt: pkg={{ item }} state=present
    with_items:
    - tmux
    - git

  - name: create required directories
    file: path={{ item }} state=directory owner=zyxxid group=zyxxid mode=0755
    with_items:
    - /data/etc
    - /data/logs

  - name: create config file
    template: src=templates/zyxxid.yaml.j2 dest=/data/etc/zyxxid.yaml owner=zyxxid mode=0644


- hosts: tex:web
  tasks:
  - name: install Python and required libraries
    apt: name={{ item }} state=present
    with_items:
    - python3-pip
    - python-virtualenv
    - python-dev
    - libffi-dev
    - libssl-dev
    - libyaml-0-2
    - libmemcached-dev

  - name: synchronize app folder
    copy: src=app dest=/data/ force=yes owner=zyxxid group=zyxxid

  - name: install app into virtual environment
    pip: name="file:///data/app" virtualenv=/data/venv virtualenv_python=python3.5
    become: yes
    become_user: zyxxid


- hosts: tex
  handlers:
  - name: unzip Aniron font
    unarchive: src=/tmp/aniron.zip dest=/usr/local/share/fonts/ copy=no

  - name: make swap
    command: mkswap /swapfile
    notify: mount swap

  - name: mount swap
    mount: name=none src=/swapfile fstype=swap opts=sw passno=0 dump=0 state=present

  tasks:
  - name: create swap file
    command: fallocate -l 4G /swapfile
    notify: make swap
    args:
      creates: /swapfile

  - name: install LaTeX and celery requirements
    apt: name={{ item }} state=present
    with_items:
    - celeryd
    - fontconfig
    - latex-xcolor
    - texlive-generic-recommended
    - texlive-latex-extra
    - texlive-latex-recommended
    - texlive-xetex
    - unzip

  - name: download PT Sans fonts
    get_url: dest=/usr/local/share/fonts/{{ item }} url=https://github.com/google/fonts/blob/master/ofl/ptsans/{{ item }}?raw=true
    with_items:
    - PT_Sans-Web-Regular.ttf
    - PT_Sans-Web-Bold.ttf
    - PT_Sans-Web-Italic.ttf
    - PT_Sans-Web-BoldItalic.ttf

  - name: download Aniron font
    get_url: dest=/tmp/aniron.zip url=http://dl.1001fonts.com/aniron.zip
    notify: unzip Aniron font

  - name: synchronize tex folder
    copy: src=tex dest=/data/ force=yes owner=zyxxid group=zyxxid

  - name: create output directory
    file: path=/data/output state=directory owner=zyxxid group=zyxxid

  - name: set up celeryd from template
    template: src=templates/celeryd.j2 dest=/etc/default/celeryd owner=root mode=0644

  - name: start and enable celeryd
    service: name=celeryd enabled=yes state=started


- hosts: web
  handlers:
  - name: restart nginx
    service: name=nginx state=restarted

  - name: restart uWSGI
    service: name=uwsgi state=restarted

  - name: restart memcached
    service: name=memcached state=restarted

  tasks:
  - name: install packages
    apt: name={{ item }} state=present
    with_items:
    - nginx
    - memcached

  - name: set up memcached from template
    template: src=templates/memcached.conf.j2 dest=/etc/memcached.conf owner=root mode=0644
    notify: restart memcached

  - name: start and enable memcached
    service: name=memcached enabled=yes state=started

  - name: copy SSL certificates
    synchronize: src=certs/ dest=/data/certs/

  - name: set permissions on SSL certificates
    file: path=/data/certs state=directory recurse=yes owner=root group=www-data mode=0750

  - name: set up nginx from template
    template: src=templates/nginx.conf.j2 dest=/etc/nginx/sites-available/zyxxid owner=root mode=0644
    notify: restart nginx

  - name: enable nginx site
    file: dest=/etc/nginx/sites-enabled/zyxxid src=/etc/nginx/sites-available/zyxxid state=link

  - name: disable default nginx site
    file: dest=/etc/nginx/sites-enabled/default state=absent

  - name: remove default nginx files
    file: dest=/etc/nginx/conf.d/{{ item }} state=absent
    with_items:
    - default.conf
    - virtual.conf
    - ssl.conf
    notify: restart nginx

  - name: add nginx user to app group
    user: name=www-data groups=zyxxid append=yes

  - name: set up uWSGI from template
    template: src=templates/uwsgi.ini.j2 dest=/data/etc/uwsgi.ini
    notify: restart uWSGI

  - name: set up uWSGI service from template
    template: src=templates/uwsgi.service.j2 dest=/etc/systemd/system/uwsgi.service
    notify: restart uWSGI

  - name: start and enable uWSGI
    service: name=uwsgi enabled=yes state=started

  - name: synchronize static web files
    synchronize: src=web/ dest=/data/www owner=no

  - name: set owner of static web files
    file: path=/data/www owner=www-data state=directory recurse=yes

  - name: check out grimoire
    git: repo=https://github.com/ephe/grimoire.git dest=/data/grimoire


- hosts: db
  vars_files:
  - passwords.yaml
  handlers:
  - name: restart Riak
    service: name=riak state=restarted

  tasks:
  - name: install database server packages
    apt: name={{ item }} state=present
    with_items:
    - rabbitmq-server

  - name: download Riak
    get_url: url=http://s3.amazonaws.com/downloads.basho.com/riak/2.1/2.1.4/ubuntu/trusty/riak_2.1.4-1_amd64.deb dest=/tmp/riak_2.1.4-1_amd64.deb

  - name: install Riak
    apt: deb=/tmp/riak_2.1.4-1_amd64.deb state=present

  - name: set up Riak from template
    template: src=templates/riak.conf.j2 dest=/etc/riak/riak.conf owner=root mode=0644
    notify: restart Riak

  - name: start and enable Riak
    service: name=riak enabled=yes state=started

  - name: join Riak cluster
    command: /usr/sbin/riak-admin cluster join riak@{{ hostvars[groups["db"][0]]["ansible_eth1"]["ipv4"]["address"] }}
    when: groups["db"].index(inventory_hostname) > 0

  - name: add RabbitMQ user
    rabbitmq_user: user=zyxxid password={{ rabbitmq_password }} vhost=/ configure_priv=.* read_priv=.* write_priv=.* state=present


- hosts: stats
  vars_files:
  - passwords.yaml

  handlers:
  - name: restart statsd
    service: name=statsd state=restarted

  - name: restart graphite-api
    service: name=graphite-api state=restarted

  - name: restart grafana
    service: name=grafana-server state=restarted

  tasks:
  - name: add grafana repository
    apt_repository: repo="deb https://packagecloud.io/grafana/stable/debian/ wheezy main" state=present update_cache=yes

  - name: add packagecloud key
    apt_key: url=https://packagecloud.io/gpg.key state=present

  - name: install stats packages
    apt: name={{ item }} state=present
    with_items:
    - graphite-carbon
    - grafana
    - python-virtualenv
    - npm
    - uwsgi

  - name: set carbon to only listen on localhost
    lineinfile: dest=/etc/carbon/carbon.conf regexp="^LINE_RECEIVER_INTERFACE" line="LINE_RECEIVER_INTERFACE = 127.0.0.1"

  - name: start and enable carbon-cache
    service: name=carbon-cache enabled=yes state=started

  - name: install graphite-api into virtual environment
    pip: name={{ item }} virtualenv=/data/graphite-api
    with_items:
    - graphite-api
    - uwsgi
    become: yes
    become_user: zyxxid

  - name: create graphite-api uwsgi config file from template
    template: src=templates/graphite.ini.j2 dest=/data/etc/graphite.ini owner=root mode=0644
    notify: restart graphite-api

  - name: create graphite-api service from template
    template: src=templates/graphite-api.service.j2 dest=/etc/systemd/system/graphite-api.service
    notify: restart graphite-api

  - name: start and enable graphite-api service
    service: name=graphite-api enabled=yes state=started

  - name: install statsd
    npm: name=statsd path=/data/statsd

  - name: create statsd config file from template
    template: src=templates/statsd.js.j2 dest=/data/etc/statsd.js owner=root mode=0644
    notify: restart statsd

  - name: create statsd service from template
    template: src=templates/statsd.service.j2 dest=/etc/systemd/system/statsd.service
    notify: restart statsd

  - name: start and enable statsd
    service: name=statsd enabled=yes state=started

  - name: create grafana config file from template
    template: src=templates/grafana.ini.j2 dest=/etc/grafana/grafana.ini owner=root mode=0644
    notify: restart grafana

  - name: start and enable grafana
    service: name=grafana-server enabled=yes state=started
